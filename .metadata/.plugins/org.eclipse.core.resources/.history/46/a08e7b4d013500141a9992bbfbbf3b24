#!/usr/bin/env python

'''
 @author: Rick Candell, Adrian Clarke
 @contact: rick.candell@nist.gov
 @organization: NIST
'''

import sys
import copy
import rospy
import math
from tf.transformations import quaternion_from_euler #, quaternion_about_axis, quaternion_from_matrix, rotation_matrix
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
import control_msgs.msg
import actionlib
from brics_actuator.msg import JointPositions, JointValue
import std_srvs.srv
    
class PoseSelector(object):
    def __init__(self, arm_num):
        self.arm_num = arm_num
        
    def disableMotors(self):
        motorOffProxy = rospy.ServiceProxy("/arm_1/switchOffMotors",std_srvs.srv.Empty)
        result = motorOffProxy()
        rospy.loginfo("Motors disabled" + str(result))
    
    def enableMotors(self):
        motorOnProxy = rospy.ServiceProxy("/arm_1/switchOnMotors",std_srvs.srv.Empty)
        result = motorOffProxy()
        rospy.loginfo("Motors disabled" + str(result))        
# 
# This is the main subroutine
#  
if __name__=='__main__':
    rospy.init_node("pose_select")
    ps = PoseSelector(1)
    ps.disableMotors()
	except rospy.ROSInterruptException:
		pass



